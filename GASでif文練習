function dailyLogUpdate() {
  try {
    // 1. シートの取得
    const sourceSpreadsheet = SpreadsheetApp.openById('取得元のスプレッドシートID');
    const sourceSheet = sourceSpreadsheet.getSheetByName('シート名');
    
    const targetSpreadsheet = SpreadsheetApp.openById('貼り付け先のスプレッドシートID');
    const targetSheet = targetSpreadsheet.getSheetByName('ADM_N発回線');
    
    // 2. データの取得
    // ヘッダー行（2行目）を取得してインデックスを特定
    const headers = sourceSheet.getRange(2, 1, 1, sourceSheet.getLastColumn()).getValues()[0];
    const lagIndex = headers.findIndex(header => header === "撤去可(LAGとゴミ有り)") + 1;
    const removeIndex = headers.findIndex(header => header === "撤去可") + 1;
    
    // データ範囲を取得
    const lastRow = sourceSheet.getLastRow();
    const lagValues = sourceSheet.getRange(3, lagIndex, lastRow - 2, 1).getValues();
    const removeValues = sourceSheet.getRange(3, removeIndex, lastRow - 2, 1).getValues();
    
    // データを結合
    let combinedValues = [];
    for (let i = 0; i < lagValues.length; i++) {
      combinedValues.push([lagValues[i][0], removeValues[i][0]]);
    }
    
    // 3. データの貼り付け
    const today = new Date();
    const dateString = Utilities.formatDate(today, 'Asia/Tokyo', 'yyyy/MM/dd');
    
    const newCol = targetSheet.getLastColumn() + 1;
    
    // 日付を1行目に設定
    targetSheet.getRange(1, newCol).setValue(dateString);
    // 3行目にヘッダーを設定
    targetSheet.getRange(3, newCol, 1, 2).setValues([["撤去可(LAGとゴミ有り)", "撤去可"]]);
    // 4行目からデータを貼り付け
    targetSheet.getRange(4, newCol, combinedValues.length, 2).setValues(combinedValues);
    
    // 4. データの比較
    if (newCol > 1) {
      const yesterdayValues = targetSheet.getRange(4, newCol - 2, combinedValues.length, 2).getValues();
      let differences = [];
      
      for (let i = 0; i < combinedValues.length; i++) {
        const lagDiff = combinedValues[i][0] !== yesterdayValues[i][0];
        const removeDiff = combinedValues[i][1] !== yesterdayValues[i][1];
        
        if (lagDiff || removeDiff) {
          differences.push({
            row: i + 4,
            lag: {
              yesterday: yesterdayValues[i][0],
              today: combinedValues[i][0],
              changed: lagDiff
            },
            remove: {
              yesterday: yesterdayValues[i][1],
              today: combinedValues[i][1],
              changed: removeDiff
            }
          });
        }
      }
      
      // 5. チャットの送信
      if (differences.length > 0) {
        let message = `${dateString} の差分:\n`;
        differences.forEach(diff => {
          message += `${diff.row}行目:\n`;
          if (diff.lag.changed) {
            message += `  撤去可(LAGとゴミ有り): ${diff.lag.yesterday} → ${diff.lag.today}\n`;
          }
          if (diff.remove.changed) {
            message += `  撤去可: ${diff.remove.yesterday} → ${diff.remove.today}\n`;
          }
        });
        
        const webhookUrl = "https://chat.googleapis.com/v1/spaces/AAAAWiNFgzw/messages?key=AIzaSyDdl0hCZlE6yvSjMm-WEfRq3CPzqKqqsHI&token=Md4sZXHc5KO8-XFC95YRZZhT9wtoRCXFb46zSY";
        
        UrlFetchApp.fetch(webhookUrl, {
          method: 'post',
          contentType: 'application/json',
          payload: JSON.stringify({ "text": message })
        });
      }
    }
    
  } catch (error) {
    // エラー発生時もチャットに通知
    const webhookUrl = "https://chat.googleapis.com/v1/spaces/AAAAWiNFgzw/messages?key=AIzaSyDdl0hCZlE6yvSjMm-WEfRq3CPzqKqqsHI&token=Md4sZXHc5KO8-XFC95YRZZhT9wtoRCXFb46zSY";
    UrlFetchApp.fetch(webhookUrl, {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify({ "text": `エラーが発生しました: ${error.message}` })
    });
  }
}
