/**
 * 指定した範囲のデータをコピーする関数
 * 
 * @param {Sheet} sourceSheet - コピー元シートオブジェクト
 * @param {Sheet} targetSheet - コピー先シートオブジェクト
 * @param {string} startCell - 開始セル（例: "D4"）
 * @param {string} endCell - 終了セル（例: "AE7"）
 * @param {string} targetStartCell - コピー先の開始セル（未指定の場合は同じ位置）
 * @return {boolean} - 処理の成功・失敗
 */
function copyRangeBetweenSheets(sourceSheet, targetSheet, startCell, endCell, targetStartCell) {
  try {
    if (!sourceSheet || !targetSheet) {
      Logger.log("エラー: 有効なシートオブジェクトが提供されていません");
      return false;
    }
    
    // セル参照から列と行の情報を抽出する関数
    function parseCell(cellRef) {
      // 列部分と行部分を分離（例: "AE7" → "AE" と "7"）
      const match = cellRef.match(/([A-Z]+)([0-9]+)/);
      if (!match) {
        throw new Error(`無効なセル参照です: ${cellRef}`);
      }
      
      const colStr = match[1];
      const row = parseInt(match[2]);
      
      // 列文字から列番号への変換
      let colNum = 0;
      for (let i = 0; i < colStr.length; i++) {
        colNum = colNum * 26 + (colStr.charCodeAt(i) - 64);
      }
      
      return { column: colNum, row: row };
    }
    
    // 開始と終了セルの位置を解析
    const start = parseCell(startCell);
    const end = parseCell(endCell);
    
    // 範囲の行数と列数を計算
    const numRows = end.row - start.row + 1;
    const numCols = end.column - start.column + 1;
    
    // コピー先の開始位置を決定
    let targetStart = start;  // デフォルトは同じ位置
    if (targetStartCell) {
      targetStart = parseCell(targetStartCell);
    }
    
    // フィルターがあれば一時的に解除
    if (targetSheet.getFilter()) {
      targetSheet.getFilter().remove();
    }
    
    // 範囲のデータを取得
    const sourceRange = sourceSheet.getRange(start.row, start.column, numRows, numCols);
    const sourceData = sourceRange.getValues();
    
    // データを対象シートに貼り付け
    const targetRange = targetSheet.getRange(targetStart.row, targetStart.column, numRows, numCols);
    targetRange.setValues(sourceData);
    
    // 必要に応じて書式もコピー
    // sourceRange.copyFormatToRange(targetSheet, targetStart.column, targetStart.column + numCols - 1, 
    //                             targetStart.row, targetStart.row + numRows - 1);
    
    // 実行完了のログを出力
    Logger.log(`範囲 ${startCell}:${endCell} から ${targetStartCell || startCell} のコピーが完了しました`);
    return true;
  } catch (error) {
    Logger.log(`エラーが発生しました: ${error.message}`);
    return false;
  }
}

/**
 * D4からAE7の範囲をコピーする具体的な使用例
 */
function copyD4ToAE7(sourceSheet, targetSheet) {
  return copyRangeBetweenSheets(sourceSheet, targetSheet, "D4", "AE7");
}

/**
 * D4からAE7の範囲を別の位置（例：G10から）にコピーする使用例
 */
function copyD4ToAE7WithOffset(sourceSheet, targetSheet) {
  return copyRangeBetweenSheets(sourceSheet, targetSheet, "D4", "AE7", "G10");
}

/**
 * 異なるスプレッドシート間で範囲をコピーする例
 */
function copyRangeBetweenSpreadsheets() {
  try {
    // ソーススプレッドシートを取得（IDを指定）
    const sourceSpreadsheet = SpreadsheetApp.openById("ソーススプレッドシートのIDをここに入力");
    const sourceSheet = sourceSpreadsheet.getSheetByName("ソースシート名");
    
    // ターゲットスプレッドシート（現在アクティブなスプレッドシート）
    const targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const targetSheet = targetSpreadsheet.getSheetByName("ターゲットシート名");
    
    // D4からAE7の範囲をコピー
    return copyD4ToAE7(sourceSheet, targetSheet);
  } catch (error) {
    Logger.log(`スプレッドシートの取得中にエラーが発生しました: ${error.message}`);
    return false;
  }
}
