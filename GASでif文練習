import tkinter as tk
from tkinter import messagebox, filedialog
import pandas as pd
import os
from openpyxl import load_workbook

class ExcelFileSelector:
    def __init__(self, root):
        self.root = root
        self.root.title("Excelファイル選択")
        
        # ウィンドウサイズの設定
        self.root.geometry("500x300")
        
        # パスを読み込むExcelファイルの設定
        self.config_excel = "C:/path/to/config.xlsx"  # 設定ファイルのパス
        self.sheet_name = "Sheet1"                    # シート名
        self.cell = "A1"                             # ディレクトリパスが書かれているセル
        
        # 選択されたファイルのパスを保存する変数
        self.selected_file_path = tk.StringVar()
        
        # 読み込んだデータを保存する変数
        self.df = None
        
        # UIの作成
        self.create_widgets()
        
    def create_widgets(self):
        # フレームの作成
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # タイトルラベル
        title_label = tk.Label(
            frame, 
            text="Excelファイルを選択してください", 
            font=("Helvetica", 12, "bold"),
            pady=10
        )
        title_label.pack()
        
        # ファイル選択ボタン
        select_button = tk.Button(
            frame,
            text="Excelファイル選択",
            command=self.select_file,
            width=20,
            height=2
        )
        select_button.pack(pady=10)
        
        # 選択されたファイルパスを表示するラベル
        path_label = tk.Label(
            frame,
            textvariable=self.selected_file_path,
            wraplength=400,
            pady=10
        )
        path_label.pack()
        
        # ファイルを開くボタン
        open_button = tk.Button(
            frame,
            text="選択したファイルを開く",
            command=self.open_selected_file,
            width=20,
            height=2
        )
        open_button.pack(pady=10)
        
        # データ読み込みボタン
        read_button = tk.Button(
            frame,
            text="データを読み込む",
            command=self.read_excel_data,
            width=20,
            height=2
        )
        read_button.pack(pady=10)
        
    def get_directory_from_excel(self):
        try:
            wb = load_workbook(self.config_excel)
            ws = wb[self.sheet_name]
            directory_path = ws[self.cell].value
            wb.close()
            return directory_path
        except Exception as e:
            messagebox.showerror("エラー", f"Excelファイルの読み込みに失敗しました: {str(e)}")
            return None
    
    def select_file(self):
        # Excelからディレクトリパスを取得
        initial_dir = self.get_directory_from_excel()
        
        if not initial_dir or not os.path.exists(initial_dir):
            initial_dir = os.path.expanduser("~")
        
        # Excelファイルのみを選択できるダイアログを表示
        file_path = filedialog.askopenfilename(
            initialdir=initial_dir,
            title="Excelファイルを選択してください",
            filetypes=(
                ("Excelファイル", "*.xlsx *.xls"),
            )
        )
        
        if file_path:
            self.selected_file_path.set(file_path)
    
    def open_selected_file(self):
        file_path = self.selected_file_path.get()
        
        if not file_path:
            messagebox.showwarning("警告", "ファイルが選択されていません")
            return
            
        if not os.path.exists(file_path):
            messagebox.showerror("エラー", "選択されたファイルが見つかりません")
            return
            
        try:
            os.startfile(file_path)
        except Exception as e:
            messagebox.showerror("エラー", f"ファイルを開けませんでした: {str(e)}")

    def read_excel_data(self):
        """選択されたExcelファイルをpandasで読み込む"""
        file_path = self.selected_file_path.get()
        
        if not file_path:
            messagebox.showwarning("警告", "ファイルが選択されていません")
            return
            
        if not os.path.exists(file_path):
            messagebox.showerror("エラー", "選択されたファイルが見つかりません")
            return
            
        try:
            # Excelファイルを読み込む
            self.df = pd.read_excel(file_path)
            
            # 読み込み成功のメッセージを表示
            rows, cols = self.df.shape
            messagebox.showinfo(
                "成功",
                f"データを読み込みました\n"
                f"行数: {rows}\n"
                f"列数: {cols}\n"
                f"列名: {', '.join(self.df.columns)}"
            )
            
            # ここで self.df に対して必要な処理を行うことができます
            return self.df
            
        except Exception as e:
            messagebox.showerror("エラー", f"データの読み込みに失敗しました: {str(e)}")
            return None

def main():
    root = tk.Tk()
    app = ExcelFileSelector(root)
    root.mainloop()

if __name__ == "__main__":
    main()
