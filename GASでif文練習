function memo() {
  // スプレッドシートとシートの取得
  const ss = SpreadsheetApp.openById("1JVnuZWa0SRp6qWXiW0dEYAJFHPkNsoNPNvVhtEvdLVc");
  const sheetA = ss.getSheetByName("【今月】施確遅延理由");
  const sheetB = ss.getSheetByName("【先月】施確遅延理由");

  const dataA = sheetA.getDataRange().getValues();
  const dataB = sheetB.getDataRange().getValues();

  const headerA = dataA[0];
  const headerB = dataB[0];

  const idColumnA = headerA.indexOf("取引ID");
  const confirmColumnA = headerA.indexOf("【前月】\n施工結果\n確認予定日");
  const checkColumnA = headerA.indexOf("遅延チェック");

  const idColumnB = headerB.indexOf("取引ID");
  const confirmColumnB = headerB.indexOf("【前月】\n施工結果\n確認予定日");

  if (idColumnA === -1 || confirmColumnA === -1 || checkColumnA === -1 || idColumnB === -1 || confirmColumnB === -1) {
    throw new Error("必要なカラムが見つかりませんでした");
  }

  Logger.log("カラムを取得しました");

  // タイムスタンプの生成（1ヶ月前の日付）
  const currentDate = new Date();
  const lastMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
  const lastMonthTimestamp = Utilities.formatDate(lastMonth, 'Asia/Tokyo', 'yyyy/MM');

  // 日付を比較する関数
  function compareDates(date1, date2) {
    if (!(date1 instanceof Date) || !(date2 instanceof Date)) {
      return false;
    }
    return date1.getFullYear() === date2.getFullYear() &&
           date1.getMonth() === date2.getMonth() &&
           date1.getDate() === date2.getDate();
  }

  function isValidDate(d) {
    return d instanceof Date && !isNaN(d);
  }

  let debugLog = [];
  let notesToUpdate = []; // 更新するメモを保存する配列

  // Aシートの各行に対して処理を実行
  for (let i = 1; i < dataA.length; i++) {
    const idA = dataA[i][idColumnA];
    const confirmA = dataA[i][confirmColumnA];

    // Bシートからマッチする

IDを持つ行を検索
    const rowB = dataB.findIndex(row => row[idColumnB] === idA);

    if (rowB !== -1) {
      // マッチする行が見つかった場合の処理
      const confirmB = dataB[rowB][confirmColumnB];
      const rangeBConfirm = sheetB.getRange(rowB + 1, confirmColumnB + 1);
      const noteB = rangeBConfirm.getNote();
      const rangeA = sheetA.getRange(i + 1, confirmColumnA + 1);
      const checkRangeA = sheetA.getRange(i + 1, checkColumnA + 1);

      let newNote = '';

      if (confirmB === '') {
        if (noteB !== '') {
          newNote = `${lastMonthTimestamp} 値なし\n${noteB}`;
        }
      } else if (!isValidDate(new Date(confirmB))) {
        debugLog.push(`行 ${i + 1}:Bシートの"確認"列の値'${confirmB}'が日付として無効`);
        newNote = `${lastMonthTimestamp} ${confirmB}\n${noteB}`;
      } else if (!compareDates(new Date(confirmA), new Date(confirmB))) {
        // AシートとBシートの "確認" 列の値が異なる場合
        const formattedConfirmB = Utilities.formatDate(new Date(confirmB), 'Asia/Tokyo', 'yyyy/MM/dd');
        newNote = `${lastMonthTimestamp} ${formattedConfirmB}\n${noteB}`;
      } else {
        // AシートとBシートの "確認" 列の値が同じ場合
        if (noteB) {
          // Bシートにメモがある場合のみ、Aシートのメモを更新
          newNote = noteB;
        }
      }

      if (newNote) {
        notesToUpdate.push({range: rangeA, note: newNote});
      }
    }
  }

  // まとめてメモを更新
  notesToUpdate.forEach(item => {
    item.range.setNote(item.note);
  });

  Logger.log(debugLog.join('\n'));
}
