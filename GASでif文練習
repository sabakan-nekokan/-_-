function inputpivot() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sourceSheet = ss.getSheetByName("3GSS_マスターファイル_V1.0");
  const targetSheet = ss.getSheetByName("週次報告集計 のコピー 2");

  const sourceData = sourceSheet.getDataRange().getValues();
  const targetData = targetSheet.getDataRange().getValues();

  const headers = sourceData[5]; // 6行目がヘッダー行
  const colIndexes = {
    hColumn: headers.indexOf("局舎名"),
    baColumn: headers.indexOf("撤去_WOID"),
    bzColumn: headers.indexOf("週次ピボット"),
    bwColumn: headers.indexOf("撤去予定月"),
    ankenName2Column: headers.indexOf("案件名２"),
    acColumn: headers.indexOf("実地局回線完了日")
  };

  let monthCounts = {
    completed: {},
    planned: {},
    tentative: {},
    selfApplied: {},
    possibleRemoval: {}
  };
  let logMessages = [];

  // ターゲットシートの日付行（71行目）を取得
  const dateRow = targetData[70];
  // 日付列のインデックスを特定（6列目から62列目まで）
  const dateColumns = {};
  for (let i = 6; i <= 17; i++) {
    if (dateRow[i]) {
      const dateString = dateRow[i];
      const formattedDateString = formatDate(dateString);
      dateColumns[formattedDateString] = i;
      monthCounts.completed[formattedDateString] = 0;
      monthCounts.planned[formattedDateString] = 0;
      monthCounts.tentative[formattedDateString] = 0;
      monthCounts.selfApplied[formattedDateString] = 0;
      monthCounts.possibleRemoval[formattedDateString] = 0;
    }
  }

  function formatDate(dateValue) {
    if (dateValue instanceof Date) {
      // Date型の場合
      const year = dateValue.getFullYear().toString().slice(-2);
      const month = (dateValue.getMonth() + 1).toString().padStart(2, '0');
      return `${year}/${month}`;
    } else if (typeof dateValue === 'string') {
      // 文字列の場合（既存の処理）
      const parts = dateValue.split('/');
      if (parts.length === 3) {
        // yyyy/mm/dd または yyyy/m/dd の形式の場合
        const year = parts[0].slice(-2);
        const month = parts[1].padStart(2, '0');
        return `${year}/${month}`;
      } else if (parts.length === 2) {
        // yyyy/mm の形式の場合
        return parts[0].slice(-2) + '/' + parts[1].padStart(2, '0');
      }
    }
    // その他の形式の場合
    return null;
  }

  // PSAX撤去でフィルターをかける処理
  const psaxRemovalData = sourceData.filter((row, index) => {
    if (index <= 5) return false;
    return row[colIndexes.ankenName2Column] === "PSAX撤去";
  });

  // 重複チェック用のSetを作成（カテゴリーごと）
  const uniqueCombinations = {
    completed: new Set(),
    planned: new Set(),
    tentative: new Set(),
    selfApplied: new Set(),
    possibleRemoval: new Set()
  };

  // 撤去予定月の処理と集計（カテゴリーごとにわけてカウントする）
  psaxRemovalData.forEach(row => {
    const hColumnValue = row[colIndexes.hColumn];
    const baColumnValue = row[colIndexes.baColumn];
    const combinationKey = `${hColumnValue}_${baColumnValue}`;
    const bzColumnValue = row[colIndexes.bzColumn];

    let rawDate;
    let category;
    if (bzColumnValue === "N検完了") {
      category = 'completed';
      rawDate = row[colIndexes.bwColumn];
    } else if (bzColumnValue === "N検予定") {
      category = 'planned';
      rawDate = row[colIndexes.bwColumn];
    } else if (bzColumnValue === "仮定") {
      category = 'tentative';
      rawDate = row[colIndexes.bwColumn];
    } else if (bzColumnValue === "撤去自前申請") {
      category = 'selfApplied';
      rawDate = row[colIndexes.bwColumn];
    } else if (bzColumnValue === "撤去可能ビル") {
      category = 'possibleRemoval';
      rawDate = row[colIndexes.acColumn];
    } else {
      return; // カテゴリーに該当しない場合はスキップ
    }

    // カテゴリーごとの重複チェック
    if (!uniqueCombinations[category].has(combinationKey)) {
      uniqueCombinations[category].add(combinationKey);

      if (rawDate instanceof Date || typeof rawDate === 'string') {
        const formattedDate = formatDate(rawDate);
        if (formattedDate && formattedDate.match(/^\d{2}\/\d{2}$/)) {
          if (formattedDate in monthCounts[category]) {
            monthCounts[category][formattedDate]++;
          } else {
            console.log(`警告: ${formattedDate} は有効な月のリストにございません。`);
          }
        } else {
          console.log(`警告: 無効な日付形式 "${rawDate}" が見つかりました。フォーマット後: ${formattedDate}`);
        }
      } else {
        console.log(`警告: 無効な日付値 "${rawDate}" が見つかりました。タイプ: ${typeof rawDate}`);
      }
    }
  });

  // 結果を記録する関数
  function writeResults(targetRow, counts) {
    for (const [dateString, count] of Object.entries(counts)) {
      const col = dateColumns[dateString] + 1;
      targetSheet.getRange(targetRow, col).setValue(count);
      logMessages.push(`入力: ${dateString} (列${col}), 値: ${count}`);
    }
  }

  // 各パターンの結果を記入
  const patterns = [
    { name: 'PSAX単月N検完了', counts: monthCounts.completed },
    { name: 'PSAX単月N検予定', counts: monthCounts.planned },
    { name: 'PSAX単月仮予定', counts: monthCounts.tentative },
    { name: 'PSAX単月撤去自前申請', counts: monthCounts.selfApplied },
    { name: 'PSAX単月撤去可能ビル', counts: monthCounts.possibleRemoval }
  ];

  patterns.forEach(pattern => {
    let targetRow = -1;
    for (let i = 0; i < targetData.length; i++) {
      if (targetData[i][4] === pattern.name) {
        targetRow = i + 1;
        break;
      }
    }

    if (targetRow === -1) {
      console.log(`エラー: targetSheetに列名"${pattern.name}"の行が見つかりませんでした。`);
    } else {
      writeResults(targetRow, pattern.counts);
      console.log(`${pattern.name}のカウント結果をtargetSheetに入力しました。`);
    }
  });

  console.log("ログメッセージ:");
  logMessages.forEach(msg => console.log(msg));

  console.log("月別カウント結果:");
  ['completed', 'planned', 'tentative', 'selfApplied', 'possibleRemoval'].forEach(type => {
    console.log(`${type}:`);
    Object.entries(monthCounts[type]).forEach(([month, count]) => {
      console.log(`  ${month}: ${count}件`);
    });
  });

  console.log(`全体の行数: ${psaxRemovalData.length}`);
  console.log("カテゴリー別にユニークな局舎名と撤去_WOID組み合わせ数:");
  Object.entries(uniqueCombinations).forEach(([category, set]) => {
    console.log(`  ${category}: ${set.size}`);
  });
}
