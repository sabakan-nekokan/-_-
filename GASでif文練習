const ss = SpreadsheetApp.getActiveSpreadsheet();
const sourceSheet = ss.getSheetByName("3GSS_マスターファイル_V1.0");
const targetSheet = ss.getSheetByName("週次報告集計 のコピー 2");

const sourceData = sourceSheet.getDataRange().getValues();
const targetData = targetSheet.getDataRange().getValues();

const headers = sourceData[5]; // 6行目がヘッダー行
const colIndexes = {
  hColumn: headers.indexOf("局名"),
  baColumn: headers.indexOf("撤去WOID"),
  bzColumn: headers.indexOf("過失レポート"),
  bwColumn: headers.indexOf("撤去予定月"),
  acColumn: headers.indexOf("基地局回線廃止完了日"),
  ankenName2Column: headers.indexOf("案件名2")
};

let monthCounts = {
  completed: {},
  planned: {},
  tentative: {},
  selfApplied: {},
  possibleRemoval: {}
};
let logMessages = [];
let invalidDates = [];

// ターゲットシートの日付行（71行目）を取得
const dateRow = targetData[70];
// 日付列のインデックスを特定（G列からR列まで）
const dateColumns = {};
for (let i = 6; i <= 17; i++) {
  if (dateRow[i]) {
    const dateString = dateRow[i];
    const formattedDateString = formatDate(dateString);
    dateColumns[formattedDateString] = i;
    monthCounts.completed[formattedDateString] = 0;
    monthCounts.planned[formattedDateString] = 0;
    monthCounts.tentative[formattedDateString] = 0;
    monthCounts.selfApplied[formattedDateString] = 0;
    monthCounts.possibleRemoval[formattedDateString] = 0;
  }
}

function formatDate(dateString) {
  const parts = dateString.split('/');
  if (parts.length >= 2) {
    const year = parts[0].slice(-2);
    const month = parts[1].padStart(2, '0');
    return `${year}/${month}`;
  }
  return dateString;
}

// PSAX撤去でフィルターをかける処理
const psaxRemovalData = sourceData.filter((row, index) => {
  if (index <= 5) return false;
  return row[colIndexes.ankenName2Column] === "PSAX撤去";
});

// 重複チェック用のSetを作成（カテゴリーごと）
const uniqueCombinations = {
  completed: new Set(),
  planned: new Set(),
  tentative: new Set(),
  selfApplied: new Set(),
  possibleRemoval: new Set()
};

// 撤去予定月の処理とカウント（カテゴリーごとに初出のみカウント）
psaxRemovalData.forEach((row, index) => {
  const hColumnValue = row[colIndexes.hColumn];
  const baColumnValue = row[colIndexes.baColumn] || '';
  const combinationKey = `${hColumnValue}_${baColumnValue}`;
  const bzColumnValue = row[colIndexes.bzColumn];

  let category;
  let rawDate;

  if (bzColumnValue === "N件完了") {
    category = 'completed';
    rawDate = row[colIndexes.bwColumn];
  } else if (bzColumnValue === "N件予定") {
    category = 'planned';
    rawDate = row[colIndexes.bwColumn];
  } else if (bzColumnValue === "仮予定") {
    category = 'tentative';
    rawDate = row[colIndexes.bwColumn];
  } else if (bzColumnValue === "撤去自前申請") {
    category = 'selfApplied';
    rawDate = row[colIndexes.bwColumn];
  } else if (bzColumnValue === "撤去可能ビル") {
    category = 'possibleRemoval';
    rawDate = row[colIndexes.acColumn];
  } else {
    console.log(`警告: 不明なカテゴリー "${bzColumnValue}" (行 ${index + 1})`);
    return;
  }

  console.log(`処理中: カテゴリー=${category}, 局名=${hColumnValue}, WOID=${baColumnValue}, 日付=${rawDate}`);

  if (uniqueCombinations[category] && !uniqueCombinations[category].has(combinationKey)) {
    uniqueCombinations[category].add(combinationKey);

    if (typeof rawDate === 'string') {
      const formattedDate = formatDate(rawDate);
      if (formattedDate.match(/^\d{2}\/\d{2}$/)) {
        if (formattedDate in monthCounts[category]) {
          monthCounts[category][formattedDate]++;
        } else {
          console.log(`警告: ${formattedDate} は有効な月のリストに含まれていません。 (行 ${index + 1})`);
        }
      } else {
        console.log(`警告: 無効な日付形式 "${rawDate}" が見つかりました。 (行 ${index + 1})`);
      }
    } else {
      console.log(`警告: 日付が文字列ではありません: ${rawDate} (行 ${index + 1})`);
    }
  } else {
    console.log(`重複または不明なカテゴリー: ${category}, キー: ${combinationKey} (行 ${index + 1})`);
  }
});

// 結果を記入する関数
function writeResults(targetRow, counts) {
  for (const [dateString, count] of Object.entries(counts)) {
    const col = dateColumns[dateString] + 1;
    targetSheet.getRange(targetRow, col).setValue(count);
    logMessages.push(`入力: ${dateString} (列${col}), 値: ${count}`);
  }
}

// 各パターンの結果を記入
const patterns = [
  { name: 'PSAX', counts: monthCounts.completed },
  { name: 'PSAX単月N件予定', counts: monthCounts.planned },
  { name: 'PSAX単月仮予定', counts: monthCounts.tentative },
  { name: 'PSAX単月撤去自前申請', counts: monthCounts.selfApplied },
  { name: 'PSAX単月撤去可能ビル', counts: monthCounts.possibleRemoval }
];

patterns.forEach(pattern => {
  let targetRow = -1;
  for (let i = 0; i < targetData.length; i++) {
    if (targetData[i][4] === pattern.name) {
      targetRow = i + 1;
      break;
    }
  }

  if (targetRow === -1) {
    console.log(`エラー: targetSheetにE列が'${pattern.name}'の行が見つかりませんでした。`);
  } else {
    writeResults(targetRow, pattern.counts);
    console.log(`${pattern.name}のカウント結果をtargetSheetに入力しました。`);
  }
});

console.log("ログメッセージ:");
logMessages.forEach(msg => console.log(msg));

console.log("月別カウント結果:");
['completed', 'planned', 'tentative', 'selfApplied', 'possibleRemoval'].forEach(type => {
  console.log(`${type}:`);
  Object.entries(monthCounts[type]).forEach(([month, count]) => {
    console.log(`  ${month}: ${count}件`);
  });
});

console.log(`全体の行数: ${psaxRemovalData.length}`);
console.log(`カテゴリー別ユニークな局社名と撤去_WOID組み合わせ数:`);
Object.entries(uniqueCombinations).forEach(([category, set]) => {
  console.log(`  ${category}: ${set.size}`);
});
