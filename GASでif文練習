// 既存の定数定義に追加
var CHECK_DAY = 0;    //日付
var CHECK_CHK = 1;    //チェック項目
var CHECK_NNM = 2;    //管理番号
var CHECK_DIV = 4;    //課名
var CHECK_MAK = 5;    //作成者
var CHECK_APV = 6;    //承認者
var CHECK_CNT = 7;    //メール送付回数
// ↓追加する定数↓
var CHECK_SEND_FLAG = 8; //送付フラグ（新規追加）

function CheckMail() {
    let ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet_check = ss.getSheetByName("棚卸しログ");
    // let sheet_appList = ss.getSheetByName("承認者リスト"); 
    let sheet_appList = ss.getSheetByName("承認者リスト (テスト用)");

    let data_check = sheet_check.getDataRange().getValues();
    let data_appList = sheet_appList.getDataRange().getValues();
    let data_targetList = [];

    let flag_kamei = false;

    // 承認者リストから課名リストをまとめて取得する
    for(i = 0 ; i < data_appList.length ; i++){
        if(flag_kamei == true){
            if(data_appList[i][0] != ""){
                data_targetList.push([data_appList[i][0], data_appList[i][1], "", "", "", ""]);
            }else{
                break;
            }
        }
        if(data_appList[i][0] == "課名"){
            flag_kamei = true;
        }
    }

    // 以下を追加：処理済み管理番号と更新行を記録するSet
    const processedNumbers = new Set();
    const updatedRows = new Set(); 

    // 棚卸しログの承認者欄をアドレスに変換する
    for(i = 0 ; i < data_appList.length ; i++){
        for(j = 0 ; j < data_check.length ; j++){
            if(data_appList[i][0] != ""){
                if(data_appList[i][0] == data_check[j][CHECK_APV]){
                    data_check[j][CHECK_APV] = data_appList[i][2]
                }
            }
        }
    }

    let controlNumbers = [];
    let creators = [];
    let mailCounts = [];
    let monthCounts = new Map();

    for(i = 1; i < data_check.length; i++){
        // ↓条件変更↓
        // 元の条件：if(data_check[i][CHECK_CHK] != "" && data_check[i][CHECK_DAY] == data_check[i][CHECK_DAY])
        if(data_check[i][CHECK_CHK] != "" && data_check[i][CHECK_SEND_FLAG] !== true){
            const currentNumber = data_check[i][CHECK_NNM];
            if(!processedNumbers.has(currentNumber)) {
                for(j = 0; j < data_targetList.length; j++){
                    let targetDivusion = data_check[i][CHECK_DIV];
                    if(targetDivusion == "NW構築課"){
                        targetDivusion = "GC施工管理課";
                    }
                    
                    if(data_targetList[j][0] === targetDivusion){
                        data_targetList[j][2] += data_check[i][CHECK_NNM] + "\n";
                        data_targetList[j][3] += data_check[i][CHECK_MAK] + "\n";
                        processedNumbers.add(currentNumber);
                        // ↓追加：処理行を記録↓
                        updatedRows.add(i);
                    }
                }
            } else {
                // ↓追加：重複行も記録↓
                updatedRows.add(i);
            }
        }
    }

    // メール送信処理（変更なし）
    for(i = 0; i < data_targetList.length; i++){
        if(data_targetList[i][2].trim() !== ""){
            MakeMail(data_targetList[i][1], data_appList[8][1],data_targetList[i][0],data_targetList[i][3],data_targetList[i][2],data_targetList[i][5]);
        }else{
            noValueMail(data_targetList[i][1], data_appList[8][1],valueA);
        }
    }

    // ↓以下を追加：チェックを付ける処理↓
    // 処理された全ての行（メール送信対象と重複）にチェックを付ける
    const updatedRowsArray = Array.from(updatedRows);
    if(updatedRowsArray.length > 0) {
        updatedRowsArray.forEach(rowIndex => {
            sheet_check.getRange(rowIndex + 1, CHECK_SEND_FLAG + 1).setValue(true);
        });
    }

    // 残りの未チェック行にもチェックを付ける
    for(i = 0; i < data_check.length; i++) {
        if(data_check[i][CHECK_CHK] !== "" && data_check[i][CHECK_SEND_FLAG] !== true) {
            sheet_check.getRange(i + 1, CHECK_SEND_FLAG + 1).setValue(true);
        }
    }
}

// MakeMail関数（変更なし）
function MakeMail(toAddress, ccAddress, targetName, targetNameLst, controlNumber, mailCount) {
    // 既存のコード
}

// noValueMail関数（変更なし）
function noValueMail(toAddress, ccAddress, targetDIV) {
    // 既存のコード
}
