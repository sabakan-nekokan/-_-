function colorCodeSheet() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const dataRange = sheet.getDataRange();
  const values = dataRange.getValues();
  const numRows = values.length;

  // ヘッダー行から列のインデックスを取得
  const headers = values[0];
  const colIndices = {
    tGray: headers.indexOf('T灰色'),
    sOrange: headers.indexOf('Sオレンジ'),
    hConfirm: headers.indexOf('H確認'),
    colorG: headers.indexOf('色塗りG'),
    colorI: headers.indexOf('色塗りI')
  };

  // すべての列が見つからない場合はエラーを投げる
  for (const [key, value] of Object.entries(colIndices)) {
    if (value === -1) {
      throw new Error(`列 "${key}" が見つかりません。`);
    }
  }

  // 色の定義
  const colors = {
    gray: '#D3D3D3',
    orange: '#FFA500',
    yellow: '#FFFF00'
  };

  // 色付けの範囲を保存する配列
  let grayRanges = [];
  let orangeRanges = [];
  let yellowRanges = [];

  // データを走査して色付けの範囲を決定
  for (let i = 1; i < numRows; i++) {
    const row = values[i];
    if (row[colIndices.tGray]) {
      grayRanges.push(sheet.getRange(i + 1, 1, 1, headers.length));
    } else if (row[colIndices.hConfirm] && !row[colIndices.sOrange]) {
      orangeRanges.push(sheet.getRange(i + 1, colIndices.hConfirm + 1, 1, 1));
      orangeRanges.push(sheet.getRange(i + 1, colIndices.colorG + 1, 1, colIndices.colorI - colIndices.colorG + 1));
    } else if (row[colIndices.hConfirm] < row[colIndices.sOrange]) {
      yellowRanges.push(sheet.getRange(i + 1, colIndices.hConfirm + 1, 1, 1));
      yellowRanges.push(sheet.getRange(i + 1, colIndices.colorG + 1, 1, colIndices.colorI - colIndices.colorG + 1));
    }
  }

  // 一括で色付けを適用
  if (grayRanges.length > 0) sheet.getRangeList(grayRanges).setBackground(colors.gray);
  if (orangeRanges.length > 0) sheet.getRangeList(orangeRanges).setBackground(colors.orange);
  if (yellowRanges.length > 0) sheet.getRangeList(yellowRanges).setBackground(colors.yellow);
}
