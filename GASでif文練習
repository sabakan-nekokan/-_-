// メイン関数
function runAllFunctions() {
  // Pythonから受け取ったJSONファイルを処理する関数
  function processJsonAndCreateSheet(jsonData) {
    return new Promise((resolve, reject) => {
      try {
        // JSONデータを処理してスプレッドシートを作成するロジック
        // この例では、仮のデータを使用しています
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
        sheet.getRange('A1').setValue('Data from Python');
        
        // 処理が完了したらresolve()を呼び出す
        resolve();
      } catch (error) {
        reject(error);
      }
    });
  }

  // 他の5つの関数（仮の実装）
  function function2() {
    return new Promise(resolve => {
      // 非同期処理
      Utilities.sleep(1000);
      Logger.log('Function 2 executed');
      resolve();
    });
  }

  function function3() {
    return new Promise(resolve => {
      // 非同期処理
      Utilities.sleep(1000);
      Logger.log('Function 3 executed');
      resolve();
    });
  }

  function function4() {
    return new Promise(resolve => {
      // 非同期処理
      Utilities.sleep(1000);
      Logger.log('Function 4 executed');
      resolve();
    });
  }

  function function5() {
    return new Promise(resolve => {
      // 非同期処理
      Utilities.sleep(1000);
      Logger.log('Function 5 executed');
      resolve();
    });
  }

  function function6() {
    return new Promise(resolve => {
      // 非同期処理
      Utilities.sleep(1000);
      Logger.log('Function 6 executed');
      resolve();
    });
  }

  // 仮のJSONデータ（実際にはPythonから受け取ります）
  const jsonData = '{"key": "value"}';

  // 関数を順番に実行
  processJsonAndCreateSheet(jsonData)
    .then(() => function2())
    .then(() => function3())
    .then(() => function4())
    .then(() => function5())
    .then(() => function6())
    .then(() => {
      Logger.log('All functions executed successfully');
    })
    .catch(error => {
      Logger.log('Error occurred: ' + error);
    });
}
