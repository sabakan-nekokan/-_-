/**
 * 指定したシート間で特定の列範囲のデータをコピーする汎用関数
 * シートオブジェクトを直接渡すバージョン（異なるスプレッドシート間でも動作）
 * 
 * @param {Sheet} sourceSheet - コピー元シートオブジェクト
 * @param {Sheet} targetSheet - コピー先シートオブジェクト
 * @param {number} startCol - 開始列番号（例: A列は1、B列は2...）
 * @param {number} colCount - コピーする列数
 * @param {number} batchSize - 一度に処理する行数（パフォーマンス調整用、デフォルト1000）
 * @return {boolean} - 処理の成功・失敗
 */
function copyColumnsDataBetweenSheets(sourceSheet, targetSheet, startCol, colCount, batchSize = 1000) {
  try {
    if (!sourceSheet || !targetSheet) {
      Logger.log("エラー: 有効なシートオブジェクトが提供されていません");
      return false;
    }
    
    // フィルターがあれば一時的に解除
    if (targetSheet.getFilter()) {
      targetSheet.getFilter().remove();
    }
    
    // コピー元シートの最終行を取得
    const lastRow = sourceSheet.getLastRow();
    if (lastRow === 0) {
      Logger.log("警告: コピー元シートにデータがありません");
      return false;
    }
    
    // バッチ処理でデータをコピー
    for (let startRow = 1; startRow <= lastRow; startRow += batchSize) {
      // 現在のバッチの行数を計算（最後のバッチは少なくなる可能性あり）
      const currentBatchRows = Math.min(batchSize, lastRow - startRow + 1);
      
      // 現在のバッチのデータを取得
      const sourceRange = sourceSheet.getRange(startRow, startCol, currentBatchRows, colCount);
      const sourceData = sourceRange.getValues();
      
      // データを対象シートに貼り付け
      const targetRange = targetSheet.getRange(startRow, startCol, currentBatchRows, colCount);
      targetRange.setValues(sourceData);
      
      // 処理の進捗を記録
      Logger.log(`行 ${startRow} から ${startRow + currentBatchRows - 1} までを処理しました`);
      
      // 処理が重くなりすぎないよう短い休止を入れる
      if (startRow + batchSize <= lastRow) {
        Utilities.sleep(100);
      }
    }
    
    // 実行完了のログを出力
    Logger.log(`列 ${startCol}～${startCol + colCount - 1} のコピーが完了しました`);
    return true;
  } catch (error) {
    Logger.log(`エラーが発生しました: ${error.message}`);
    return false;
  }
}

/**
 * 異なるスプレッドシート間でP列からR列をコピーする使用例
 */
function copyPtoRColumnsBetweenSpreadsheets() {
  try {
    // ソーススプレッドシートを取得（IDを指定）
    const sourceSpreadsheet = SpreadsheetApp.openById("ソーススプレッドシートのIDをここに入力");
    const sourceSheet = sourceSpreadsheet.getSheetByName("ソースシート名");
    
    // ターゲットスプレッドシート（現在アクティブなスプレッドシート）
    const targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const targetSheet = targetSpreadsheet.getSheetByName("ターゲットシート名");
    
    // P列(16)からR列(18)までコピー
    return copyColumnsDataBetweenSheets(sourceSheet, targetSheet, 16, 3);
  } catch (error) {
    Logger.log(`スプレッドシートの取得中にエラーが発生しました: ${error.message}`);
    return false;
  }
}

/**
 * 既存のシート変数を使用する例（外部から渡されたシート変数を使用する場合）
 * 
 * // この関数は以下のような形で呼び出すことを想定:
 * function exampleUsage() {
 *   // 既に取得済みのシート変数
 *   const sourceSheet = SpreadsheetApp.openById("ID").getSheetByName("シート名");
 *   const targetSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("シート名");
 *   
 *   // P列からR列をコピー
 *   copyUsingExistingSheetVariables(sourceSheet, targetSheet);
 * }
 */
function copyUsingExistingSheetVariables(sourceSheet, targetSheet) {
  // P列(16)からR列(18)までコピー
  return copyColumnsDataBetweenSheets(sourceSheet, targetSheet, 16, 3);
}

/**
 * メニューから実行できるようにするためのセットアップ関数
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('カスタム機能')
    .addItem('別スプレッドシートからP〜R列をコピー', 'copyPtoRColumnsBetweenSpreadsheets')
    .addToUi();
}
