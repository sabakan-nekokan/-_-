function memo() {
  const ss = SpreadsheetApp.openById("1JVnuZWa0SRp6qWXiW0dEYAJFHPkNsoNPNvVhtEvdLVc");
  const sheetA = ss.getSheetByName("【今月】施確遅延理由");
  const sheetB = ss.getSheetByName("【先月】施確遅延理由");

  // Get all data at once
  const dataA = sheetA.getDataRange().getValues();
  const dataB = sheetB.getDataRange().getValues();

  const headerA = dataA[0];
  const headerB = dataB[0];

  const idColumnA = headerA.indexOf("散去ID");
  const confirmColumnA = headerA.indexOf("【前月】\n施工結果\n確認予定日");
  const checkColumnA = headerA.indexOf("遅延チェック");

  const idColumnB = headerB.indexOf("散去ID");
  const confirmColumnB = headerB.indexOf("【前月】\n施工結果\n確認予定日");

  if (idColumnA === -1 || confirmColumnA === -1 || checkColumnA === -1 || idColumnB === -1 || confirmColumnB === -1) {
    throw new Error("必要なカラムが見つかりませんでした");
  }

  // Create a map of B sheet data for faster lookup
  const dataBMap = new Map(dataB.slice(1).map(row => [row[idColumnB], row]));

  const currentDate = new Date();
  const lastMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
  const lastMonthTimestamp = Utilities.formatDate(lastMonth, 'Asia/Tokyo', 'yyyy/MM');

  const updates = [];

  // Process data
  for (let i = 1; i < dataA.length; i++) {
    const idA = dataA[i][idColumnA];
    const confirmA = dataA[i][confirmColumnA];

    const rowB = dataBMap.get(idA);
    if (rowB) {
      const confirmB = rowB[confirmColumnB];
      const noteB = sheetB.getRange(dataB.indexOf(rowB) + 1, confirmColumnB + 1).getNote();

      let newNote = '';
      if (confirmB === '') {
        if (noteB !== '') {
          newNote = `${lastMonthTimestamp} 値なし\n${noteB}`;
        }
      } else if (!isValidDate(new Date(confirmB))) {
        newNote = `${lastMonthTimestamp} ${confirmB}\n${noteB}`;
      } else if (!compareDates(new Date(confirmA), new Date(confirmB))) {
        const formattedConfirmB = Utilities.formatDate(new Date(confirmB), 'Asia/Tokyo', 'yyyy/MM/dd');
        newNote = `${lastMonthTimestamp} ${formattedConfirmB}\n${noteB}`;
      } else if (noteB) {
        newNote = noteB;
      }

      if (newNote) {
        updates.push([i + 1, confirmColumnA + 1, newNote]);
      }
    }
  }

  // Batch update
  if (updates.length > 0) {
    updates.forEach(([row, col, note]) => {
      sheetA.getRange(row, col).setNote(note);
    });
  }

  Logger.log("処理が完了しました");
}

function compareDates(date1, date2) {
  if (!(date1 instanceof Date) || !(date2 instanceof Date)) {
    return false;
  }
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
}

function isValidDate(d) {
  return d instanceof Date && !isNaN(d);
}
