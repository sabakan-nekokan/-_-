// Webhook通知用の設定
const WEBHOOK_URL = 'YOUR_WEBHOOK_URL'; 

// Webhook通知用関数
function sendWebhookNotification(message) {
  try {
    const payload = {
      "text": message
    };
    
    const options = {
      'method': 'post',
      'contentType': 'application/json',
      'payload': JSON.stringify(payload)
    };
    
    UrlFetchApp.fetch(WEBHOOK_URL, options);
  } catch (error) {
    console.error('Webhook notification failed:', error);
  }
}

// トリガー設定用の関数
function setRetryTrigger(functionName, minutes = 5, maxRetries = 3) {
  // 既存のトリガーを確認
  const triggers = ScriptApp.getProjectTriggers();
  const existingTrigger = triggers.find(trigger => 
    trigger.getHandlerFunction() === functionName && 
    trigger.getUniqueId().startsWith('retry_')
  );
  
  // 既存のトリガーがある場合はスキップ
  if (existingTrigger) {
    console.log('Retry trigger already exists');
    return;
  }
  
  // スクリプトのプロパティを取得
  const scriptProperties = PropertiesService.getScriptProperties();
  const retryCount = parseInt(scriptProperties.getProperty('retryCount') || '0');
  
  // 最大リトライ回数を超えていないか確認
  if (retryCount >= maxRetries) {
    console.log(`Max retries (${maxRetries}) reached`);
    scriptProperties.deleteProperty('retryCount');
    sendWebhookNotification(`❌ 最大リトライ回数(${maxRetries}回)に到達しました。手動での確認が必要です。`);
    return;
  }
  
  // 次回実行時間を設定
  const triggerTime = new Date();
  triggerTime.setMinutes(triggerTime.getMinutes() + minutes);
  
  // トリガーを作成
  const trigger = ScriptApp.newTrigger(functionName)
    .timeBased()
    .at(triggerTime)
    .create();
  
  // リトライカウントを増やして保存
  scriptProperties.setProperty('retryCount', (retryCount + 1).toString());
  
  console.log(`Retry trigger set for ${triggerTime} (${retryCount + 1}/${maxRetries})`);
}

function RemoveIRecordscol2() {
  try {
    console.log("処理開始: RemoveIRecordscol2");
    
    const spreadsheet = SpreadsheetApp.openById("17NfUqM6s6zJ1HMx4ywTevd9Gw16taaSZTbFS7dUv0Ko");
    if (!spreadsheet) throw new Error("ソーススプレッドシートが開けません");
    
    const datasheet = spreadsheet.getSheetByName("DB_撤去案件_詳細");
    if (!datasheet) throw new Error("シートが見つかりません");
    
    console.log("データシートの読み込み完了");
    
    const dataColumn = datasheet.getRange(1, 1, 1, datasheet.getLastColumn()).getValues()[0];
    const exNo = dataColumn.indexOf('案件実行状況') + 1;
    const phNo = dataColumn.indexOf('撤去Phase') + 1;
    const deNo = dataColumn.indexOf('レコード削除日') + 1;
    
    if (exNo === 0 || phNo === 0 || deNo === 0) {
      throw new Error("必要なカラムが見つかりません");
    }
    
    console.log("カラムインデックス取得完了");
    
    const dataArray = datasheet.getRange(1, 1, datasheet.getLastRow(), datasheet.getLastColumn()).getValues();
    const filteredArray = [];
    
    for (let i = 0; i < dataArray.length; i++) {
      if (((dataArray[i][exNo - 1].match("実行中") || dataArray[i][exNo - 1].match("保留")) && (
          dataArray[i][phNo - 1].match("3G") ||
          dataArray[i][phNo - 1].match("FY24_BB") ||
          dataArray[i][phNo - 1].match("FY24_XQ") ||
          dataArray[i][phNo - 1].match("FY25_XQ") ||
          dataArray[i][phNo - 1].match("FY26_XQ") ||
          dataArray[i][phNo - 1] === "") && dataArray[i][deNo - 1] === "")) {
        filteredArray.push(dataArray[i]);
      }
    }
    
    console.log(`フィルター後のデータ数: ${filteredArray.length}件`);
    
    const spreadsheet2 = SpreadsheetApp.openById("1fV0Th048DR0iVgP_fyNT-_NDdfGnYXcS1DnephXMSWw");
    const sheet = spreadsheet2.getSheetByName("FY24_3Q以降");
    
    if (!sheet) throw new Error("ターゲットシートが見つかりません");
    
    const lastRow = sheet.getLastRow();
    if (lastRow > 1) {
      const range = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn());
      range.clearContent();
    }
    
    if (filteredArray.length > 0) {
      sheet.getRange(2, 1, filteredArray.length, filteredArray[0].length)
           .setValues(filteredArray);
    }
    
    PropertiesService.getScriptProperties().deleteProperty('retryCount');
    console.log(`処理完了: ${filteredArray.length}件`);
    
  } catch (error) {
    console.error(`エラーが発生しました: ${error.message}`);
    setRetryTrigger('RemoveIRecordscol2', 5, 3);
    throw error;
  }
}
