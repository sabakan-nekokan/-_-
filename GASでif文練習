function processRemovalType(removalType, sourceData, targetData, colIndexes) {
  const monthCounts = {
    completed: {}, planned: {}, tentative: {}, selfApplied: {}, possibleRemoval: {}
  };
  const uniqueCombinations = {
    completed: new Set(), planned: new Set(), tentative: new Set(),
    selfApplied: new Set(), possibleRemoval: new Set()
  };
  const logMessages = [];

  // ターゲットシートの日付行（71行目）を取得し、日付列のインデックスを特定
  const dateRow = targetData[70];
  const dateColumns = {};
  for (let i = 6; i <= 17; i++) {
    if (dateRow[i]) {
      const formattedDateString = formatDate(dateRow[i]);
      dateColumns[formattedDateString] = i;
      Object.keys(monthCounts).forEach(key => {
        monthCounts[key][formattedDateString] = 0;
      });
    }
  }

  // 撤去タイプでフィルターをかける処理
  const removalData = sourceData.filter((row, index) => 
    index > 5 && row[colIndexes.ankenName2Column] === removalType
  );

  // データ処理
  removalData.forEach(row => {
    const bzColumnValue = row[colIndexes.bzColumn];
    const category = getCategoryFromBzValue(bzColumnValue);
    if (!category) return;

    const combinationKey = `${row[colIndexes.hColumn]}_${row[colIndexes.baColumn]}`;
    uniqueCombinations[category].add(combinationKey);

    const rawDate = category === 'possibleRemoval' ? row[colIndexes.acColumn] : row[colIndexes.bwColumn];
    processDate(rawDate, category, monthCounts, logMessages);
  });

  return { monthCounts, uniqueCombinations, logMessages, dateColumns, totalProcessed: removalData.length };
}

function logResults(results) {
  console.log("\n=== 処理結果のサマリー ===\n");

  const categoryNames = {
    possibleRemoval: '撤去可能ビル',
    selfApplied: '撤去自前申請',
    completed: 'N検完了',
    planned: 'N検予定',
    tentative: '仮予定'
  };

  const categoryOrder = ['possibleRemoval', 'selfApplied', 'completed', 'planned', 'tentative'];

  Object.entries(results).forEach(([removalType, data]) => {
    const displayType = removalType === 'MURS撤去' ? 'MU-RS撤去' : removalType;
    console.log(`\n${displayType}の結果:`);

    console.log("\n1. 月別カウント結果:");
    categoryOrder.forEach(category => {
      const counts = data.monthCounts[category];
      console.log(`\n  ${categoryNames[category]}:`);
      Object.entries(counts)
        .sort(([a], [b]) => a.localeCompare(b))
        .forEach(([month, count]) => {
          if (count > 0) {  // カウントが0より大きい場合のみ表示
            console.log(`    ${month}: ${count}件`);
          }
        });
    });

    console.log("\n2. 全体の処理行数:", data.totalProcessed);

    console.log("\n3. カテゴリー別ユニークな組み合わせ数:");
    categoryOrder.forEach(category => {
      const count = data.uniqueCombinations[category].size;
      if (count > 0) {  // カウントが0より大きい場合のみ表示
        console.log(`  ${categoryNames[category]}: ${count}`);
      }
    });

    if (data.logMessages.length > 0) {
      console.log("\n4. 警告・情報メッセージ:");
      data.logMessages.forEach((msg, index) => {
        console.log(`  ${index + 1}. ${msg}`);
      });
    }
  });

  console.log("\n=== 処理完了 ===");
}
