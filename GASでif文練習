/**
 * 指定した複数の特定列（連続していない列）をコピーする関数
 * 
 * @param {Sheet} sourceSheet - コピー元シートオブジェクト
 * @param {Sheet} targetSheet - コピー先シートオブジェクト
 * @param {Array} columnLetters - コピーする列の文字（例: ['BR', 'BS', 'CH', 'CI']）
 * @param {number} batchSize - 一度に処理する行数（パフォーマンス調整用、デフォルト1000）
 * @param {number} headerRows - ヘッダー行数（デフォルト1）
 * @return {boolean} - 処理の成功・失敗
 */
function copySpecificColumnsBetweenSheets(sourceSheet, targetSheet, columnLetters, batchSize = 1000, headerRows = 1) {
  try {
    if (!sourceSheet || !targetSheet) {
      Logger.log("エラー: 有効なシートオブジェクトが提供されていません");
      return false;
    }
    
    // 列文字から列番号への変換ヘルパー関数
    function columnLetterToNumber(letter) {
      let column = 0;
      const length = letter.length;
      for (let i = 0; i < length; i++) {
        column += (letter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);
      }
      return column;
    }
    
    // 列文字を列番号に変換
    const columnNumbers = columnLetters.map(letter => columnLetterToNumber(letter));
    
    // フィルターがあれば一時的に解除
    if (targetSheet.getFilter()) {
      targetSheet.getFilter().remove();
    }
    
    // コピー元シートの最終行を取得
    let lastRow = 0;
    try {
      lastRow = sourceSheet.getLastRow();
      if (lastRow === 0) {
        Logger.log("警告: コピー元シートにデータがありません");
        return false;
      }
    } catch (e) {
      Logger.log("最終行の取得に失敗しました: " + e.message);
      return false;
    }
    
    // 各列ごとに処理
    for (let colIndex = 0; colIndex < columnNumbers.length; colIndex++) {
      const columnNumber = columnNumbers[colIndex];
      const columnLetter = columnLetters[colIndex];
      
      // ヘッダー部分を先にコピー
      if (headerRows > 0) {
        const headerSourceRange = sourceSheet.getRange(1, columnNumber, headerRows, 1);
        const headerSourceData = headerSourceRange.getValues();
        const headerTargetRange = targetSheet.getRange(1, columnNumber, headerRows, 1);
        headerTargetRange.setValues(headerSourceData);
        Logger.log(`列 ${columnLetter} のヘッダー部分をコピーしました`);
      }
      
      // データ部分をバッチ処理でコピー
      const startDataRow = headerRows + 1;
      for (let startRow = startDataRow; startRow <= lastRow; startRow += batchSize) {
        // 現在のバッチの行数を計算
        const currentBatchRows = Math.min(batchSize, lastRow - startRow + 1);
        
        // 現在の列のデータを取得
        const sourceRange = sourceSheet.getRange(startRow, columnNumber, currentBatchRows, 1);
        const sourceData = sourceRange.getValues();
        
        // データを対象シートに貼り付け
        const targetRange = targetSheet.getRange(startRow, columnNumber, currentBatchRows, 1);
        targetRange.setValues(sourceData);
        
        // 処理の進捗を記録
        Logger.log(`列 ${columnLetter} の行 ${startRow} から ${startRow + currentBatchRows - 1} までを処理しました`);
        
        // 処理負荷軽減のための短い休止
        if (startRow + batchSize <= lastRow) {
          Utilities.sleep(50);
        }
      }
      
      Logger.log(`列 ${columnLetter} のコピーが完了しました`);
      
      // 列間の処理でも短い休止を入れる
      if (colIndex < columnNumbers.length - 1) {
        Utilities.sleep(100);
      }
    }
    
    // 実行完了のログを出力
    Logger.log(`指定した列 ${columnLetters.join(', ')} のコピーが全て完了しました`);
    return true;
  } catch (error) {
    Logger.log(`エラーが発生しました: ${error.message}`);
    return false;
  }
}

/**
 * BR, BS, CH, CI列をコピーする具体的な使用例
 * ヘッダー行数を2行に指定した例
 */
function copyBrBsChCiColumns(sourceSheet, targetSheet) {
  return copySpecificColumnsBetweenSheets(sourceSheet, targetSheet, ['BR', 'BS', 'CH', 'CI'], 1000, 2);
}

/**
 * 異なるスプレッドシート間でBR, BS, CH, CI列をコピーする例
 */
function copySpecificColumnsBetweenSpreadsheets() {
  try {
    // ソーススプレッドシートを取得（IDを指定）
    const sourceSpreadsheet = SpreadsheetApp.openById("ソーススプレッドシートのIDをここに入力");
    const sourceSheet = sourceSpreadsheet.getSheetByName("ソースシート名");
    
    // ターゲットスプレッドシート（現在アクティブなスプレッドシート）
    const targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const targetSheet = targetSpreadsheet.getSheetByName("ターゲットシート名");
    
    // BR, BS, CH, CI列をコピー
    return copyBrBsChCiColumns(sourceSheet, targetSheet);
  } catch (error) {
    Logger.log(`スプレッドシートの取得中にエラーが発生しました: ${error.message}`);
    return false;
  }
}
