function countAndUpdateMatchingRows() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sourceSheet = ss.getSheetByName("撤去可能ビル確認（PS）");
  const targetSheet = ss.getSheetByName("週次報告集計");
  
  const sourceData = sourceSheet.getDataRange().getValues();
  const targetData = targetSheet.getDataRange().getValues();
  
  const headers = sourceData[5]; // 6行目がヘッダー行
  const colIndexes = {
    hColumn: headers.indexOf("H列の名前"),
    baColumn: headers.indexOf("BA列の名前"),
    processFlag: headers.indexOf("処理フラグ"),
    bwColumn: headers.indexOf("BW列の名前") // 撤去予定月列
  };
  const monthCounts = {};
  const combinations = {};
  let logMessages = [];
  let invalidDates = []; // 無効な日付を記録する配列
  
  // ターゲットシートの日付行（71行目）を取得
  const dateRow = targetData[70];
  // 日付列のインデックスを特定（G列からR列まで）
  const dateColumns = {};
  for (let i = 6; i <= 17; i++) { // G列は6、R列は17
    if (dateRow[i]) {
      const dateString = dateRow[i]; // すでに "YY/MM" 形式なのでそのまま使用
      dateColumns[dateString] = i;
      monthCounts[dateString] = 0; // 全ての月を0で初期化
    }
  }
  logMessages.push(`初期化された月: ${Object.keys(monthCounts).join(", ")}`);
  
  for (let i = 6; i < sourceData.length; i++) { // 7行目以降を処理
    const currentRow = sourceData[i];
    if (currentRow[colIndexes.processFlag] === "o") {
      const combination = `${currentRow[colIndexes.hColumn]},${currentRow[colIndexes.baColumn]}`;
      const originalDate = currentRow[colIndexes.bwColumn];
      const dateString = formatDateToYYMM(originalDate);
      
      if (dateString === null) {
        invalidDates.push({row: i + 1, value: originalDate}); // 行番号は1から始まるため+1
        continue; // 無効な日付はスキップ
      }
      
      if (dateString in monthCounts) {
        if (!combinations[dateString]) {
          combinations[dateString] = {};
        }
        if (!(combination in combinations[dateString])) {
          monthCounts[dateString]++;
          combinations[dateString][combination] = true;
          logMessages.push(`カウント増加: ${dateString}, 組み合わせ: ${combination}`);
        } else {
          logMessages.push(`重複スキップ: ${dateString}, 組み合わせ: ${combination}`);
        }
      }
    }
  }
  
  // 結果を記入
  const targetRow = 73; // PSAX単月 撤去自前申請の行
  for (const [dateString, count] of Object.entries(monthCounts)) {
    const col = dateColumns[dateString] + 1; // スプレッドシートの列は1から始まるため
    targetSheet.getRange(targetRow, col).setValue(count);
    logMessages.push(`入力: ${dateString} (列${col}), 値: ${count}`);
  }
  
  // ログの出力
  Logger.log("処理ログ:");
  logMessages.forEach(msg => Logger.log(msg));
  Logger.log(`最終的な月ごとのカウント: ${JSON.stringify(monthCounts)}`);
  
  // 無効な日付のログ
  if (invalidDates.length > 0) {
    Logger.log("無効な日付:");
    invalidDates.forEach(({row, value}) => {
      Logger.log(`行 ${row}: ${value}`);
    });
  } else {
    Logger.log("無効な日付はありませんでした。");
  }
}

// 日付を 'YY/MM' 形式にフォーマットする関数
function formatDateToYYMM(dateString) {
  if (typeof dateString === 'string') {
    const parts = dateString.split('/');
    if (parts.length === 2 && parts[0].length === 4 && parts[1].length === 2) {
      const year = parts[0].slice(-2);
      const month = parts[1];
      return `${year}/${month}`;
    }
  }
  // 無効な日付形式の場合はnullを返す
  return null;
}
