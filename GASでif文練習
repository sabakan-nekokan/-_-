const ss = SpreadsheetApp.getActiveSpreadsheet();
const sourceSheet = ss.getSheetByName("3GSS_マスターファイル_V1.0");
const targetSheet = ss.getSheetByName("週次報告集計 のコピー 2");

const sourceData = sourceSheet.getDataRange().getValues();
const targetData = targetSheet.getDataRange().getValues();

const headers = sourceData[5]; // 6行目がヘッダー行
const colIndexes = {
  hColumn: headers.indexOf("局名"),
  baColumn: headers.indexOf("撤去WOID"),
  processFlag: headers.indexOf("撤去自前申請判定"),
  bzColumn: headers.indexOf("過失レポート"),
  bwColumn: headers.indexOf("撤去予定月"),
  ankenName2Column: headers.indexOf("案件名2")
};

let monthCounts = {};
const combi = {};
let logMessages = [];
let invalidDates = [];

// ターゲットシートの日付行（71行目）を取得
const dateRow = targetData[70];
// 日付列のインデックスを特定（G列からR列まで）
const dateColumns = {};
for (let i = 6; i <= 17; i++) {
  if (dateRow[i]) {
    const dateString = dateRow[i];
    const formattedDateString = formatDate(dateString);
    dateColumns[formattedDateString] = i;
    monthCounts[formattedDateString] = 0; // 全ての月を0で初期化
  }
}

// 日付をyy/mm形式に変換する関数
function formatDate(dateString) {
  const parts = dateString.split('/');
  if (parts.length === 2) {
    return parts[0].slice(-2) + '/' + parts[1].padStart(2, '0');
  }
  return dateString; // 変換できない場合は元の文字列を返す
}

// PSAX撤去でフィルターをかける処理
const psaxRemovalData = sourceData.filter((row, index) => {
  if (index <= 5) return false;
  return row[colIndexes.ankenName2Column] === "PSAX撤去";
});

// PSAX撤去かつN件完了でフィルターをかける処理
const psaxRemovalCompletedData = psaxRemovalData.filter(row => {
  return row[colIndexes.bzColumn] === "N件完了";
});

console.log(`PSAX撤去かつN件完了でフィルターをかけた結果：${psaxRemovalCompletedData.length}行のデータが見つかりました。`);

// 重複チェック用のSetを作成
const uniqueCombinations = new Set();

// 撤去予定月の処理とカウント（初出のみカウント）
psaxRemovalCompletedData.forEach(row => {
  const hColumnValue = row[colIndexes.hColumn];
  const baColumnValue = row[colIndexes.baColumn];
  const combinationKey = `${hColumnValue}_${baColumnValue}`;

  // 重複チェック
  if (!uniqueCombinations.has(combinationKey)) {
    uniqueCombinations.add(combinationKey);

    const rawDate = row[colIndexes.bwColumn];
    if (typeof rawDate === 'string' && rawDate.match(/^\d{4}\/\d{2}$/)) {
      const formattedDate = formatDate(rawDate);
      if (formattedDate in monthCounts) {
        monthCounts[formattedDate]++;
      } else {
        console.log(`警告: ${formattedDate} は有効な月のリストに含まれていません。`);
      }
    } else {
      console.log(`警告: 無効な日付形式 "${rawDate}" が見つかりました。`);
    }
  }
  // 重複の場合はスキップ（何もしない）
});

// 結果の出力
console.log("月別カウント結果（初出のみカウント）:");
Object.entries(monthCounts).forEach(([month, count]) => {
  console.log(`${month}: ${count}件`);
});

console.log(`全体の行数: ${psaxRemovalCompletedData.length}`);
console.log(`ユニークな局社名と撤去_WOID組み合わせ数: ${uniqueCombinations.size}`);

// さらなる処理や結果の出力をここに追加...
