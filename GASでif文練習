function checkCa() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("撤去可能ビル確認（PS）テスト用");
  const data = sheet.getDataRange().getValues();
  const headers = data[5];
  const lastRow = sheet.getLastRow();

  const colIndexes = {
    dColum: headers.indexOf("案件実行状況"),
    bfColum: headers.indexOf("NTT申請日"),
    bzColum: headers.indexOf("過次ピボット"),
    caColum: headers.indexOf("撤去自前申請判定"),
    processFlagColum: headers.indexOf("処理フラグ"),
    stationNameColum: headers.indexOf("局社名"),
    woIdColum: headers.indexOf("WO-ID")
  };

  // Clear both "撤去自前申請判定" and "処理フラグ" columns
  sheet.getRange(7, colIndexes.caColum + 1, lastRow - 6).clear();
  sheet.getRange(7, colIndexes.processFlagColum + 1, lastRow - 6).clear();

  // Create a Set to store unique combinations of "局社名" and "WO-ID"
  const processedCombinations = new Set();

  data.slice(6).forEach((row, i) => {
    if ((row[colIndexes.bzColum] === "DB登録前" || row[colIndexes.bzColum] === "撤去可能ビル") &&
        row[colIndexes.dColum] === "実行中" &&
        row[colIndexes.bfColum] !== "") {
      
      // Always set "o" in the "処理フラグ" column
      sheet.getRange(i + 7, colIndexes.processFlagColum + 1).setValue("o");

      // Check for unique combination of "局社名" and "WO-ID"
      const combination = `${row[colIndexes.stationNameColum]}_${row[colIndexes.woIdColum]}`;
      
      if (!processedCombinations.has(combination)) {
        sheet.getRange(i + 7, colIndexes.caColum + 1).setValue("撤去自前申請");
        processedCombinations.add(combination);
      }
    }
  });
}
