/**
 * 指定したシート間で特定の列範囲のデータをコピーする汎用関数
 * @param {string} sourceSheetName - コピー元シート名
 * @param {string} targetSheetName - コピー先シート名
 * @param {number} startCol - 開始列番号（例: A列は1、B列は2...）
 * @param {number} colCount - コピーする列数
 * @param {number} batchSize - 一度に処理する行数（パフォーマンス調整用、デフォルト1000）
 * @return {boolean} - 処理の成功・失敗
 */
function copyColumnsData(sourceSheetName, targetSheetName, startCol, colCount, batchSize = 1000) {
  try {
    // スプレッドシートを取得
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // コピー元のシート
    const sourceSheet = ss.getSheetByName(sourceSheetName);
    if (!sourceSheet) {
      Logger.log(`エラー: コピー元シート "${sourceSheetName}" が見つかりません`);
      return false;
    }
    
    // コピー先のシート
    const targetSheet = ss.getSheetByName(targetSheetName);
    if (!targetSheet) {
      Logger.log(`エラー: コピー先シート "${targetSheetName}" が見つかりません`);
      return false;
    }
    
    // フィルターがあれば一時的に解除
    if (targetSheet.getFilter()) {
      targetSheet.getFilter().remove();
    }
    
    // コピー元シートの最終行を取得
    const lastRow = sourceSheet.getLastRow();
    if (lastRow === 0) {
      Logger.log(`警告: コピー元シート "${sourceSheetName}" にデータがありません`);
      return false;
    }
    
    // バッチ処理でデータをコピー
    for (let startRow = 1; startRow <= lastRow; startRow += batchSize) {
      // 現在のバッチの行数を計算（最後のバッチは少なくなる可能性あり）
      const currentBatchRows = Math.min(batchSize, lastRow - startRow + 1);
      
      // 現在のバッチのデータを取得
      const sourceRange = sourceSheet.getRange(startRow, startCol, currentBatchRows, colCount);
      const sourceData = sourceRange.getValues();
      
      // データを対象シートに貼り付け
      const targetRange = targetSheet.getRange(startRow, startCol, currentBatchRows, colCount);
      targetRange.setValues(sourceData);
      
      // 処理の進捗を記録
      Logger.log(`行 ${startRow} から ${startRow + currentBatchRows - 1} までを処理しました`);
      
      // 処理が重くなりすぎないよう短い休止を入れる
      if (startRow + batchSize <= lastRow) {
        Utilities.sleep(100);
      }
    }
    
    // 実行完了のログを出力
    Logger.log(`"${sourceSheetName}" から "${targetSheetName}" への列 ${startCol}～${startCol + colCount - 1} のコピーが完了しました`);
    return true;
  } catch (error) {
    Logger.log(`エラーが発生しました: ${error.message}`);
    return false;
  }
}

/**
 * P列からR列をコピーする具体的な例（オリジナルの実装と同等）
 */
function copyPtoRColumns() {
  // P列は16列目、R列は18列目なので、開始列=16、列数=3を指定
  return copyColumnsData("Sheet1", "Sheet2", 16, 3);
}

/**
 * カスタム列範囲をコピーする例
 */
function copyCustomColumns() {
  // 例: A列からC列までコピー (A=1, C=3なので、開始列=1、列数=3)
  return copyColumnsData("シート1", "シート2", 1, 3);
  
  // 例: D列からF列までコピー (D=4, F=6なので、開始列=4、列数=3)
  // return copyColumnsData("シート1", "シート2", 4, 3);
}

/**
 * メニューから実行できるようにするためのセットアップ関数
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('カスタム機能')
    .addItem('P〜R列をコピー', 'copyPtoRColumns')
    .addItem('カスタム範囲コピー', 'copyCustomColumns')
    .addToUi();
}
