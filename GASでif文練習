function updateSheet() {
  var startTime = new Date();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheetA = ss.getSheetByName('Aシート(今月)');
  var sheetB = ss.getSheetByName('Bシート(先月)');

  var dataA = sheetA.getDataRange().getValues();
  var dataB = sheetB.getDataRange().getValues();
  var notesB = sheetB.getDataRange().getNotes();

  var headerA = dataA[0];
  var idIndexA = headerA.indexOf('ID');
  var dateIndexA = headerA.indexOf('確認');
  var checkIndexA = headerA.indexOf('チェック');

  var headerB = dataB[0];
  var idIndexB = headerB.indexOf('ID');
  var dateIndexB = headerB.indexOf('確認');

  var updatedCells = [];
  var processedRows = 0;

  var currentDate = new Date();
  var currentYearMonth = Utilities.formatDate(currentDate, 'Asia/Tokyo', 'yyyy/MM/dd');

  for (var i = 1; i < dataA.length; i++) {
    var idA = dataA[i][idIndexA];
    var dateA = normalizeDate(dataA[i][dateIndexA]);
    var foundMatch = false;

    for (var j = 1; j < dataB.length; j++) {
      var idB = dataB[j][idIndexB];
      var dateB = normalizeDate(dataB[j][dateIndexB]);

      if (idA === idB) {
        foundMatch = true;
        var noteB = notesB[j][dateIndexB];
        
        if (dateA && dateB && dateA === dateB) {
          // 日付が一致する場合、Bシートのメモをそのままコピー
          updatedCells.push({row: i + 1, col: dateIndexA + 1, note: noteB});
        } else if (dateB) {
          // 日付が異なる場合、新しいエントリーを追加
          var dateBObj = new Date(dateB);
          var oneMonthAgo = new Date(dateBObj.getFullYear(), dateBObj.getMonth() - 1, 1);
          var oneMonthAgoStr = Utilities.formatDate(oneMonthAgo, 'Asia/Tokyo', 'yyyy/MM');
          var newEntry = `【${oneMonthAgoStr}】 ${dateB}`;
          
          var currentNoteA = sheetA.getRange(i + 1, dateIndexA + 1).getNote();
          var updatedNote = newEntry + (currentNoteA ? '\n' + currentNoteA : '');
          updatedCells.push({row: i + 1, col: dateIndexA + 1, note: updatedNote});
        } else {
          // Bシートの値が空白の場合
          var newEntry = `【${currentYearMonth}】 "値なし"`;
          var currentNoteA = sheetA.getRange(i + 1, dateIndexA + 1).getNote();
          var updatedNote = newEntry + (currentNoteA ? '\n' + currentNoteA : '');
          updatedCells.push({row: i + 1, col: dateIndexA + 1, note: updatedNote});
          updatedCells.push({row: i + 1, col: checkIndexA + 1, value: "要確認"});
        }
        break;
      }
    }

    if (!foundMatch) {
      // Bシートに対応するIDがない場合
      var newEntry = `【${currentYearMonth}】 "値なし"`;
      var currentNoteA = sheetA.getRange(i + 1, dateIndexA + 1).getNote();
      var updatedNote = newEntry + (currentNoteA ? '\n' + currentNoteA : '');
      updatedCells.push({row: i + 1, col: dateIndexA + 1, note: updatedNote});
      updatedCells.push({row: i + 1, col: checkIndexA + 1, value: "要確認"});
    }

    processedRows++;
    if (processedRows % 1000 === 0) {
      Logger.log(`Processed ${processedRows} rows...`);
    }
  }

  // バッチ更新
  updatedCells.forEach(function(cell) {
    if (cell.note !== undefined) {
      sheetA.getRange(cell.row, cell.col).setNote(cell.note);
    }
    if (cell.value !== undefined) {
      sheetA.getRange(cell.row, cell.col).setValue(cell.value);
    }
  });

  var endTime = new Date();
  var executionTime = (endTime - startTime) / 1000; // 秒単位
  Logger.log(`Total rows processed: ${processedRows}`);
  Logger.log(`Execution time: ${executionTime} seconds`);
}

function normalizeDate(dateValue) {
  if (dateValue === undefined || dateValue === null || dateValue === '') return null;

  var dateString = '';
  if (dateValue instanceof Date) {
    dateString = Utilities.formatDate(dateValue, 'Asia/Tokyo', 'yyyy/MM/dd');
  } else if (typeof dateValue === 'string') {
    dateString = dateValue.trim();
  } else {
    return null;
  }

  if (dateString === '') return null;

  var parts = dateString.split('/');
  if (parts.length !== 3) return null;

  if (isNaN(parts[0]) || isNaN(parts[1]) || isNaN(parts[2])) return null;

  return parts[0] + '/' + parts[1].padStart(2, '0') + '/' + parts[2].padStart(2, '0');
}
