function dailyLogUpdate() {
  // 1. シートの取得
  const sourceSheet = SpreadsheetApp.openById('AS回線スプレッドシートID').getSheetByName('シート名');
  const logSheet = SpreadsheetApp.openById('貼り付け先のスプレッドシートID').getSheetByName('ADM_AS回線');
  
  // 2. データの取得
  const headers = sourceSheet.getRange('3:3').getValues()[0];
  const phaseCol = headers.indexOf('撤去\nPhase') + 1;
  
  // データ範囲を取得（最終行まで全て取得）
  const lastRow = sourceSheet.getLastRow();
  
  // 値とメモを別々に取得
  const phaseData = sourceSheet.getRange(4, phaseCol, lastRow - 3, 1).getValues();
  const phaseNotes = sourceSheet.getRange(4, phaseCol, lastRow - 3, 1).getNotes();
  
  // 値とメモを組み合わせる
  const todayData = phaseData.map((row, i) => {
    const value = row[0] === '' ? '' : row[0];
    const note = phaseNotes[i][0];
    return [
      value + (note ? ` (メモ: ${note})` : '')  // 値とメモを結合
    ];
  });
  
  // 3. データの貼り付け
  const date = Utilities.formatDate(new Date(), 'Asia/Tokyo', 'yyyy/MM/dd');
  logSheet.insertColumnsAfter(1, 1);
  
  // 日付を1行目に設定
  logSheet.getRange(1, 2).setValue(date);
  // ヘッダーを3行目に設定
  logSheet.getRange(3, 2).setValue("撤去Phase");
  
  // データを4行目から貼り付け
  const targetRange = logSheet.getRange(4, 2, todayData.length, 1);
  targetRange.setValues(todayData);
  
  // 4. 前日データと比較して差分を通知
  if (logSheet.getLastColumn() >= 3) {
    const yesterdayData = logSheet.getRange(4, 3, todayData.length, 1).getValues();
    let message = '';
    
    for (let i = 0; i < todayData.length; i++) {
      if (todayData[i][0] !== yesterdayData[i][0]) {
        message += `${i + 4}行目:\n`;
        message += `撤去Phase: ${yesterdayData[i][0] || '空白'} → ${todayData[i][0] || '空白'}\n`;
      }
    }
    
    if (message) {
      const webhook = "https://chat.googleapis.com/v1/spaces/AAAAWiNFgzw/messages?key=AIzaSyDdl0hCZlE6yvSjMm-WEfRq3CPzqKqqsHI&token=Md4sZXHc5KO8-XFC95YRZZhT9wtoRCXFb46zSY";
      UrlFetchApp.fetch(webhook, {
        method: 'post',
        contentType: 'application/json',
        payload: JSON.stringify({ text: date + "の差分:\n" + message })
      });
    }
  }
}
