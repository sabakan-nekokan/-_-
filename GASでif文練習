function colorSheet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const dataRange = sheet.getDataRange();
  const values = dataRange.getValues();
  const numRows = values.length;
  const numCols = values[0].length;

  // ヘッダーから必要な列のインデックスを取得
  const headers = values[0];
  const endIndex = headers.indexOf('終了');
  const scheduledIndex = headers.indexOf('確認予定');
  const limitIndex = headers.indexOf('リミット');
  const checkIndex = headers.indexOf('チェック');
  const lastMonthIndex = headers.indexOf('前月確認');

  // 背景色の設定
  const greyColor = '#D3D3D3';
  const orangeColor = '#FFA500';
  const yellowColor = '#FFFF00';

  // 塗るセルの範囲を保持する配列
  let greyCells = [];
  let orangeCells = [];
  let yellowCells = [];

  // データを走査して条件をチェック
  for (let i = 1; i < numRows; i++) {
    const row = values[i];
    
    if (row[endIndex]) {
      // [終了]に値がある場合、行全体を灰色にする
      greyCells.push(sheet.getRange(i + 1, 1, 1, numCols));
    } else {
      const limit = row[limitIndex];
      const scheduled = row[scheduledIndex];
      
      if (limit && !scheduled) {
        // [リミット]に値があり[確認予定]がない場合
        orangeCells.push(sheet.getRange(i + 1, limitIndex + 1, 1, 1));
        orangeCells.push(sheet.getRange(i + 1, checkIndex + 1, 1, 1));
        orangeCells.push(sheet.getRange(i + 1, lastMonthIndex + 1, 1, 1));
      } else if (limit && scheduled && new Date(limit) < new Date(scheduled)) {
        // [リミット]<[確認予定]の場合
        yellowCells.push(sheet.getRange(i + 1, limitIndex + 1, 1, 1));
        yellowCells.push(sheet.getRange(i + 1, checkIndex + 1, 1, 1));
        yellowCells.push(sheet.getRange(i + 1, lastMonthIndex + 1, 1, 1));
      }
    }
  }

  // 一括で背景色を設定
  if (greyCells.length > 0) {
    sheet.getRangeList(greyCells).setBackground(greyColor);
  }
  if (orangeCells.length > 0) {
    sheet.getRangeList(orangeCells).setBackground(orangeColor);
  }
  if (yellowCells.length > 0) {
    sheet.getRangeList(yellowCells).setBackground(yellowColor);
  }
}
